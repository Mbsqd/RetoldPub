import logging

from datetime import datetime
from zoneinfo import ZoneInfo

from database.database_connect import config
from alerts_in_ua import Client as AlertsClient

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —à—Ç–∞–º–ø–æ–º.
cache = {}

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
CACHE_EXPIRY_SECONDS = 75


async def get_active_alerts():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à–µ –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –µ–≥–æ –∂–∏–∑–Ω–∏.
    if 'result' in cache and 'timestamp' in cache:
        time_since_cached = datetime.now(ZoneInfo("Europe/Kiev")) - cache['timestamp']
        if time_since_cached.total_seconds() < CACHE_EXPIRY_SECONDS:
            # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à–µ.
            return cache['result']

    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –∏–ª–∏ –≤—Ä–µ–º—è –µ–≥–æ –∂–∏–∑–Ω–∏ –∏—Å—Ç–µ–∫–ª–æ, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ API.
    alerts_client = AlertsClient(token=config.alerts_token)
    alert_status = str(alerts_client.get_air_raid_alert_status(9))

    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ —Ñ–∞–π–ª–∞.
    if "active" in alert_status:
        result = "üî¥–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!"
        logging.info(f"Alert status: ALERT")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º.
        cache['result'] = result
        cache['timestamp'] = datetime.now(ZoneInfo("Europe/Kiev"))
        return result
    else:
        if "no_alert" in alert_status:
            result = "üü¢–ù–µ–º–∞—î —á–æ–≥–æ —Ç—Ä—è—Å—Ç–∏—Å—è."
            logging.info(f"Alert status: SKY IS CLEAR")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º.
            cache['result'] = result
            cache['timestamp'] = datetime.now(ZoneInfo("Europe/Kiev"))
            return result
